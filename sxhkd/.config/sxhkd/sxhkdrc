mod4 + alt + shift + slash
     systemctl suspend

mod4 + ctrl + shift + slash
     systemctl suspend


# wm independent hotkeys
#



#
# bspwm hotkeys
#

# quit/restart bspwm
mod4 + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
{_,shift + }F4
	 bspc config pointer_follows_focus false ; \
	 ~/.scripts/window/act.sh -{c,k} ; \
	 sleep 1 ; \
	 bspc config pointer_follows_focus true

# alternate between the tiled and monocle layout
mod4 + shift + m
	bspc desktop -l next

# focus next monitor
mod4 + g
	bspc monitor --focus next

# send node to next monitor
mod4 + shift + g
     	bspc node --to-monitor next --follow

#
# state/flags
#

# set the window state
mod4 + {shift + @space, f}
      bspc node -t {\~floating, \~fullscreen}


# if it's pseudo tiled, tile it; otherwise, pseudo tile it
mod4 + space
	if [ -n "$(bspc query -N -n focused.pseudo_tiled)" ]; then \
	   bspc node focused -t tiled; \
	else \
	     bspc node focused -t pseudo_tiled; \
	fi
	     


# set the node flags
mod4 + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
mod4 + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the prev/next non-empty desktop in the current monitor
mod4 + {comma, period}
      bspc desktop -f {prev,next}.local.occupied

# follow active window to prev/next desktop (whether empty or not)
mod4 + shift + {comma, period}
      bspc node --to-desktop {prev,next}.local --follow

# focus the prev/next empty desktop in the current monitor
mod4 + alt + {comma, period}
      bspc desktop -f {prev,next}.local.!occupied

# send active window to prev/next empty desktop and follow
mod4 + alt + shift + {comma, period}
       bspc node --to-desktop {prev,next}.local.!occupied --follow

# cycle through nodes in desktop
@mod4 + {_, shift+} Tab
    bspc node -f {next,prev}.local.leaf

@alt + {_, shift+} Tab
	; (bspc desktop -f {next,prev}.local.occupied & sleep 0.2)


# focus the older or newer node in the focus history
mod4 + bracket{left,right}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus/send to the given desktop
mod4 + {_,shift + }{1-9}
     bspc {desktop -f, node --to-desktop} '^{1-9}'
#	~/.scripts/window/act.sh {--capturefocuscapture,-s} '^{1-9}'

mod4 + alt + {1-9}
	bspc node --to-desktop '^{1-9}' --follow

mod4 + {_,shift +} 0
	bspc {desktop -f, node --to-desktop, node --to-desktop} '^10'
#	~/.scripts/window/act.sh {--capturefocuscapture,-s} '^10'

mod4 + alt + 0
	bspc node --to-desktop '^10' --follow


# focus next empty desktop
mod4 + minus
      bspc desktop -f next.local.!occupied

# send/follow to next empty desktop
mod4 + {shift, alt} minus
      bspc node --to-desktop next.local.!occupied {_,--follow}

# open next window in next empty desktop
mod4 + semicolon
     bspc rule -a '*' -o desktop=next.!occupied follow=on

# open next window as floating
mod4 + colon
     bspc rule -a '*' -o state=floating


#
# preselect
#

# preselect the direction
mod4 + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
mod4 + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
mod4 + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
mod4 + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
mod4 + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
mod4 + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
#mod4 + {Left,Down,Up,Right}
	#bspc node -v {-20 0,0 20,0 -20,20 0}

mod4 + shift + Return
    emacsclient -create-frame --alternate-editor='' -e "(shell)"






button15
       urxvt


# kill notifications
~Escape
	 pkill 9menu ; dunstctl close-all ; pkill -f 'feh.*thumbnail' ; bspc node any.sticky -g hidden=on




# bluetooth
mod4 + alt + {b, shift + b}
     {bluetoothctl power on && bluetoothctl connect, bluetoothctl power off && bluetoothctl disconnect} $(bluetoothctl paired-devices | cut -f2 -d' ' | head -n 1)

# open emacs
mod4 + e
     (pgrep emacsclient && findoropen emacs) || emacsclient -create-frame

mod4 + shift + e
     emacsclient -create-frame


# pomodoro
# mod4 + p ; {p, b, c, r}
#     { pomo 25m pomodoro, pomo 5 break, pkill --newest pomo ; pkill -f ringtone.webm, notify-send "$(pomo-time.sh) remaining" "($(pomo-time.sh name))"}

# reports
# mod4 + r ; {b, d, n, p, v}
#      notify-send {"$(acpi)", "$(date '+%A\, %B %d%n%_I:%M%P')", "$(ping -c 1 gnu.org 2>&1)", "$(pomo-time.sh name)" "$(pomo-time.sh) remaining", "volume: $(volume query)"}


# mod4 + r ; m
#      reload-cover # this one already sends a notification

# pause / unpause dunst
mod4 + backslash
       ;dunstctl set-paused false

@mod4 + backslash
      ; sleep 0.3; [ $(dunstctl is-paused) = false ] && dunstctl set-paused true

mod4 + shift + backslash
     dunstctl set-paused toggle

# not working as desired but it does provide the functionality all the
# same



#open non-duplicate programs
# mod4 + {a,c, shift + r,t,shift+t,v,w,shift+x}
      # findoropen {anki, chromium, rocket rocketchat-desktop /snap/bin/rocketchat-desktop, thunderbird, Browser tor-browser,mpv,"$WEB",xournalpp}

mod4 + i
    findoropen idea

# open signal
# mod4 + s
     # if /bin/pgrep -x signal-desktop; then \
     	# findoropen signal signal-desktop /opt/Signal/signal-desktop; \
     # else \
        # signal-desktop; \
     # fi

# open ncmpcpp
# mod4 + m
      # (pgrep -x ncmpcpp || bspc rule -a '*' -o desktop='^7' follow=on); TERMINAL='urxvt -fn xft:ubuntumono:size=24' findoropen -t ncmpcpp

# find teams if it's open; otherwise, findoropen zoom
mod4 + z
     findoropen zoom
#     (pgrep teams && findoropen teams) || findoropen zoom




# files

# bg
mod4 + alt + f
     ~/.config/.fehbg


# rotate
# {_, shift +} F8
	# ~/.local/bin/rotate-script.sh {invert, normal}


#special keys

XF86Calculator
	qalculate-gtk

# XF86Audio{LowerVolume,RaiseVolume}
	# pactl set-sink-volume @DEFAULT_SINK@ {-,+}600
#	volume {-, +}

# {_, shift} + XF86AudioMute
	# volume {toggle,mute}

# XF86Audio{Play,Pause}
	# mpvisrunning="$(/bin/pgrep -u "$USER" mpv)" ;\
	# if [ -n "$mpvisrunning" ]; then \
	   # echo 'mpv running' >> status ;\
	   # findoropen mpv ;\
	   # mpvc toggle || (sleep 0.1 ; xdotool key space) ;\
	# else \
	   # echo 'no mpv' >> status ;\
	   # mpc toggle ;\
	# fi

# It works! :)
# {_, shift +} XF86AudioPrev
	# mpvisrunning="$(/bin/pgrep mpv)" ;\
	# if [ -n "$mpvisrunning" ]; then \
	   # findoropen mpv ;\
	   # {mpvc seek -10s || (sleep 0.1 ; xdotool key --clearmodifiers Left); else mpc prev, \
 	    # mpvc seek -60s || (sleep 0.1 ; xdotool key --clearmodifiers Down); else mpc seek 0} ;\ 
	# fi
# # 's/mpvc seek -60s/mpvc prev/' if you want to make use of the playlist features
# 


# {_, shift +} XF86AudioNext
	# mpvisrunning="$(/bin/pgrep mpv)" ;\
	# if [ -n "$mpvisrunning" ]; then \
	   # findoropen mpv ;\
	   # {mpvc seek +10s || (sleep 0.1 ; xdotool key --clearmodifiers Right); else mpc next, \
 	    # mpvc seek +60s || (sleep 0.1 ; xdotool key --clearmodifiers Up); else mpc random; mpc next} ;\ 
	# fi


# XF86{TaskPane,RotateWindows}
	# ~/.local/bin/rotate-script.sh {invert, normal}


# take screenshots to clipboard
{_, shift +} F9
      sleep 0.2 && screenshot {clipboard --select, clipboard} 

# save screenshots
super + {_, shift} + F9
      sleep 0.2 && screenshot {--select,  } 
