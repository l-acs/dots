
# wm independent hotkeys
#

# terminal emulator
mod4 + Return
     if isapplication Emacs ; then \
     	xdotool key --clearmodifiers alt+e; \
	xdotool type --clearmodifiers shell; \
	xdotool key --clearmodifiers Return; \
     else \
     	emacsclient -create-frame --alternate-editor='' -e "(shell)" ;\
     fi

# term \"/bin/tmux\")"


mod4 + shift + Return
	eval ${TERMINAL}




# make sxhkd reload its configuration files:
mod4 + Escape
	pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit/restart bspwm
mod4 + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
{_,shift + }F4
	 bspc config pointer_follows_focus false ; \
	 ~/.scripts/window/act.sh -{c,k} ; \
	 sleep 1 ; \
	 bspc config pointer_follows_focus true

# alternate between the tiled and monocle layout
#mod4 + m
#	bspc desktop -l next

# send the newest marked node to the newest preselected node
#mod4 + y
#	bspc node newest.marked.local -n newest.!automatic.local

# focus next desktop
mod4 + g
	bspc monitor --focus next

# send node to next desktop
mod4 + shift + g
     	bspc node --to-monitor next --follow

#
# state/flags
#

# set the window state
mod4 + {shift + @space, f}
      bspc node -t {\~floating, \~fullscreen}


# if it's pseudo tiled, tile it; otherwise, pseudo tile it
mod4 + space
	if [ -n "$(bspc query -N -n focused.pseudo_tiled)" ]; then \
	   bspc node focused -t tiled; \
	else \
	     bspc node focused -t pseudo_tiled; \
	fi
	     


# set the node flags
mod4 + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
mod4 + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# useful but didn't use
# focus the node for the given path jump
#mod4 + {p,b,comma,period}
#	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
mod4 + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous non-empty desktop in the current monitor
mod4 + bracket{left,right}
      bspc desktop -f {prev,next}.local.occupied

# focus next/previous empty desktop in the current monitor
mod4 + shift + bracket{left,right}
      bspc desktop -f {prev,next}.local.!occupied


# focus the prev/next non-empty desktop in the current monitor
mod4 + {comma, period}
      bspc desktop -f {prev,next}.local.occupied

# follow active window to prev/next desktop (whether empty or not)
mod4 + shift + {comma, period}
      bspc node --to-desktop {prev,next}.local --follow

# focus the prev/next empty desktop in the current monitor
mod4 + alt + {comma, period}
      bspc desktop -f {prev,next}.local.!occupied

# send active window to prev/next empty desktop and follow
mod4 + alt + shift + {comma, period}
       bspc node --to-desktop {prev,next}.local.!occupied --follow

# focus the last node/desktop
#mod4 + {grave,Tab}
#	bspc {node,desktop} -f last

# cycle through nodes in desktop
mod4 + {_, shift+} Tab
    bspc node -f {next,prev}.local.leaf

# cycle through desktops in desktop
alt + {_, shift+} Tab
     bspc wm -h off; \
     bspc desktop -f {older,newer}.occupied; \
     bspc wm -h on
     bspc desktop -f focused

# bspc desktop -f {next,prev}.local.occupied



# focus the older or newer node in the focus history
mod4 + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus/send to the given desktop
mod4 + {_,shift + }{1-9}
	~/.scripts/window/act.sh {--capturefocuscapture,-s} '^{1-9}'

mod4 + alt + {1-9}
	bspc node --to-desktop '^{1-9}' --follow

mod4 + {_,shift + }0
	~/.scripts/window/act.sh {--capturefocuscapture,-s} '^10'

# focus next empty desktop
mod4 + minus
      bspc desktop -f next.local.!occupied

# send/follow to next empty desktop
mod4 + {shift, alt} minus
      bspc node --to-desktop next.local.!occupied {_,--follow}

# open next window in next empty desktop
mod4 + semicolon
     bspc rule -a '*' -o desktop=next.!occupied follow=on

# cancel
# problematic...
mod4 + shift + semicolon
     bspc rule -r tail

#
# preselect
#

# preselect the direction
mod4 + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
mod4 + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
mod4 + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
mod4 + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
mod4 + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
mod4 + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
#mod4 + {Left,Down,Up,Right}
	#bspc node -v {-20 0,0 20,0 -20,20 0}




# right click magic
~button3
	(isroot || isapplication URxvt emacs -v ncmpcpp) && ( pkill 9menu || clickbait )

~button1
	(isapplication 9menu || pkill 9menu)



~button2
	pkill 9menu ; isroot && act.sh --draw


# extra mouse buttons
button9
	plumb --keybind
	
button8 ; button{1,2,3,4,5,9}
	{gestureclose.sh, act.sh -c, bspc node -d next.local.!occupied, bspc desktop -f next, bspc desktop -f prev, sleep 0.2 && act.sh --draw}


button8 ; button8 ; button{1,2,3,9,8}
	{eval $VISUAL, eval $TERMINAL, pcmanfm, firefox, #abort}


# bindings sans modifier
#{~f, ~m, ~s, ~e, ~t, ~Return}
#	haswindows || {firefox, findoropen deezer -t ncmpcpp, rofi -show combi -combi-modi "drun\,window", eval $VISUAL, urxvt -e tmux -f ~/.config/tmux/tmux.conf, urxvt -e tmux -f ~/.config/tmux/tmux.conf}


# kill notifications
~Escape
	 pkill 9menu ; dunstctl close-all ; pkill -f 'feh.*thumbnail'





# file browsers
mod4 + {b, shift + b}
      {browse, pcmanfm}

# bluetooth
mod4 + alt + {b, shift + b}
     {bluetoothctl power on && bluetoothctl connect, bluetoothctl power off && bluetoothctl disconnect} $(bluetoothctl devices | cut -f2 -d' ' | head -n 1)


# open emacs
mod4 + e
      eval $VISUAL


# pomodoro
mod4 + p ; {p, b, c}
    { pomo pomodoro, pomo 5 break, pkill pomo ; pkill -f ringtone.webm }



#open non-duplicate programs
mod4 + {a,m,r,s,t,shift+t,v,w,shift+x}
      findoropen {anki, deezer -t ncmpcpp, rocketchat-desktop, signal signal-desktop, thunderbird, Browser tor-browser,mpv,"$WEB",xournalpp}

# find teams if it's open; otherwise, findoropen zoom
mod4 + z
     (pgrep teams && findoropen teams) || findoropen zoom

#files

#cover art, notes, manpdf
mod4 + shift + {a, p, y}
      {feh --auto-zoom --keep-zoom-vp $HOME/.scripts/output/cover.png, zathura $HOME/.scripts/output/man.pdf, td}






#open selectors
mod4 + {n, x, shift + v, y}
      {~/ruby/jot.rb $( find ~/gtd -type f \! -name '*~' \! -wholename '*gtd/capture.org' | sed "s|^$HOME/gtd/||" | sort | dmenu), rofi -show combi -combi-modi "drun\,window", vsel, tdsel}





# function keys
F2
	~/.scripts/window/act.sh -d




# reload the bar
mod4 + F3
	bar

# brightness
{F5,F6}
	brightnessctl set {5%-,+5%} --exponent=1.5


# rotate
{_, shift +} F8
	~/.local/bin/rotate-script.sh {invert, normal}



#special keys

XF86Calculator
	qalculate-gtk

XF86Audio{LowerVolume,RaiseVolume}
	pactl set-sink-volume @DEFAULT_SINK@ {-,+}600

#	volume {-, +}

{_, shift} + XF86AudioMute
	volume {toggle,mute}

XF86Audio{Play,Pause}
	mpvisrunning="$(pgrep mpv)" ;\
	if [ -n "$mpvisrunning" ]; then \
	   findoropen mpv ;\
	   mpvc toggle ;\
	else mpc toggle ; fi

XF86AudioPrev
	mpvisrunning="$(pgrep mpv)" ;\
	if [ -n "$mpvisrunning" ]; then \
	   findoropen mpv ;\
	   xdotool key Left ;\
	else mpc prev ; fi

XF86AudioNext
	mpvisrunning="$(pgrep mpv)" ;\
	if [ -n "$mpvisrunning" ]; then \
	   findoropen mpv ;\
	   xdotool key Right ;\
	else mpc next ; fi

XF86{TaskPane,RotateWindows}
	~/.local/bin/rotate-script.sh {invert, normal}


#page up + mod = bright up
{mod4, control, alt} + Prior
     for i in $(xrandr -q | grep ' connected' | cut -f1 -d' ' ); do \
     	 bright $i + ; \
     done

#page down + mod = bright down
{mod4, control, alt} + Next
     for i in $(xrandr -q | grep ' connected' | cut -f1 -d' ' ); do \
     	 bright $i - ; \
     done

#shift + page up + mod = force bright up
shift + {_,mod4, control, alt} + Prior
    xbright +

#shift + page down + mod = force bright down
shift + {_,mod4, control, alt} + Next
    xbright -



# take screenshots to clipboard
{_, shift +} F9
      sleep 0.2 && screenshot {clipboard --select, clipboard} 

# save screenshots
super + {_, shift +} + F9
      sleep 0.2 && screenshot {--select,  } 




{F10, F11}
      volume {-,+}
	
#{XF86AudioMute, shift + XF86AudioMute}
{F12, shift + F12}
      volume {toggle, mute}

mod4 + F12
     plumb





mod4 + {Up, Down, Left, shift + Left, Right, shift + Right}
	mpc {volume +2, volume -2, prev, seek 0, next, toggle}

mod4 + alt + {Left, Right}
        mpc seek {-,+}2




# compositor, nightshift
mod4 + {equal, plus}
      {pkill picom || picom -b, pkill redshift || redshift -c ~/.config/redshift.conf}

